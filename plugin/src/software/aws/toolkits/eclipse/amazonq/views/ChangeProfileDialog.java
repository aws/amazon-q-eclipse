// Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

package software.aws.toolkits.eclipse.amazonq.views;

import java.util.List;

import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.custom.StyleRange;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;

import software.aws.toolkits.eclipse.amazonq.configuration.profiles.QDeveloperProfileUtil;
import software.aws.toolkits.eclipse.amazonq.util.PluginPlatform;
import software.aws.toolkits.eclipse.amazonq.util.PluginUtils;
import software.aws.toolkits.eclipse.amazonq.views.model.QDeveloperProfile;

public final class ChangeProfileDialog extends Dialog {

    private static final String WINDOW_TITLE = "Amazon Q Developer Profile";
    private static final String HEADER = "Change your Q Developer Profile";
    private static final String DESCRIPTION = "Choose the profile that meets your current working needs. When you change profiles, "
            + "you will no longer have access to your current customizations, chats, code reviews, or any other "
            + "code or content being generated by Amazon Q.";

    private Composite container;
    private Font titleFont;
    private Font descriptionFont;
    private RadioButtonWithDescriptor selectedRadioButton;

    public final class RadioButtonWithDescriptor extends Composite {

        private Button radioButton;
        private StyledText profileNameAndRegionText;
        private Label accountIdLabel;
        private Font profileNameFont;
        private Font accountIdFont;
        private Font regionFont;

        public RadioButtonWithDescriptor(final Composite parent, final String profileName, final String region,
                final String accountId, final int style) {
            super(parent, SWT.NONE);

            GridLayout layout = new GridLayout(1, false);
            layout.marginWidth = 0;
            layout.marginHeight = 0;
            layout.verticalSpacing = 2;
            this.setLayout(layout);

            Composite topRow = new Composite(this, SWT.NONE);
            GridLayout topRowLayout = new GridLayout(2, false);
            topRowLayout.marginWidth = 0;
            topRowLayout.marginHeight = 0;
            topRow.setLayout(topRowLayout);
            topRow.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));

            radioButton = new Button(topRow, SWT.RADIO | style);
            radioButton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));

            profileNameFont = createFont(12, SWT.NORMAL);
            regionFont = createFont(12, SWT.ITALIC);

            profileNameAndRegionText = new StyledText(topRow, SWT.READ_ONLY);
            profileNameAndRegionText.setText(profileName + " - " + region);

            StyleRange profileStyle = new StyleRange();
            profileStyle.start = 0;
            profileStyle.length = profileName.length() + 2;
            profileStyle.font = profileNameFont;

            StyleRange regionStyle = new StyleRange();
            regionStyle.start = profileName.length() + 2;
            regionStyle.length = region.length();
            regionStyle.font = regionFont;

            profileNameAndRegionText.setStyleRanges(new StyleRange[] {profileStyle, regionStyle});

            GridData combinedData = new GridData(SWT.FILL, SWT.CENTER, true, false);
            combinedData.horizontalIndent = PluginUtils.getPlatform().equals(PluginPlatform.WINDOWS) ? 3 : 0;
            profileNameAndRegionText.setLayoutData(combinedData);

            profileNameAndRegionText.setBackground(topRow.getBackground());
            profileNameAndRegionText.setEditable(false);
            profileNameAndRegionText.setCaret(null);

            accountIdFont = createFont(10, SWT.NORMAL);
            accountIdLabel = new Label(this, SWT.WRAP);
            accountIdLabel.setText("Account ID: " + accountId);
            accountIdLabel.setFont(accountIdFont);
            accountIdLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_DARK_GRAY));
            GridData accountIdData = new GridData(SWT.FILL, SWT.CENTER, true, false);
            accountIdData.horizontalIndent = PluginUtils.getPlatform().equals(PluginPlatform.WINDOWS) ? 21 : 23;
            accountIdLabel.setLayoutData(accountIdData);

            addDisposeListener(e -> {
                if (accountIdFont != null && !accountIdFont.isDisposed()) {
                    accountIdFont.dispose();
                }
                if (profileNameFont != null && !profileNameFont.isDisposed()) {
                    profileNameFont.dispose();
                }
            });
        }

        public void setSelection(final boolean isSelected) {
            radioButton.setSelection(isSelected);
        }

        public void addSelectionListener(final Runnable runnable) {
            radioButton.addSelectionListener(new SelectionAdapter() {
                @Override
                public void widgetSelected(final SelectionEvent event) {
                    runnable.run();
                }
            });

            profileNameAndRegionText.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseDown(final MouseEvent event) {
                    radioButton.setSelection(true);
                    runnable.run();
                }
            });

            accountIdLabel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseDown(final MouseEvent event) {
                    radioButton.setSelection(true);
                    runnable.run();
                }
            });
        }
    }

    public ChangeProfileDialog(final Shell parentShell) {
        super(parentShell);
    }


    private Font createFont(final int size, final int style) {
        FontData[] fontData = getShell().getDisplay().getSystemFont().getFontData();
        FontData newFontData = new FontData(fontData[0].getName(), size, // specify exact font size
                style); // SWT.NORMAL, SWT.BOLD, SWT.ITALIC, or SWT.BOLD | SWT.ITALIC
        return new Font(getShell().getDisplay(), newFontData);
    }

    @Override
    protected Control createDialogArea(final Composite parent) {
        container = (Composite) super.createDialogArea(parent);

        GridLayout mainLayout = new GridLayout(1, false);
        mainLayout.marginWidth = 15;
        mainLayout.marginHeight = 15;
        mainLayout.verticalSpacing = 10;
        container.setLayout(mainLayout);

        GridData gridData = new GridData(SWT.FILL, SWT.FILL, true, true);
        gridData.widthHint = 450;
        gridData.heightHint = 200;
        container.setLayoutData(gridData);

        titleFont = createFont(14, SWT.BOLD);

        Label headerLabel = new Label(container, SWT.NONE);
        headerLabel.setText(HEADER);
        headerLabel.setFont(titleFont);
        headerLabel.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));

        descriptionFont = createFont(12, SWT.NORMAL);

        StyledText descriptionText = new StyledText(container, SWT.READ_ONLY | SWT.WRAP);
        descriptionText.setText(DESCRIPTION);
        descriptionText.setFont(descriptionFont);
        descriptionText.setBackground(container.getBackground());
        descriptionText.setEditable(false);
        descriptionText.setCaret(null);
        GridData textData = new GridData(SWT.FILL, SWT.CENTER, true, false);
        descriptionText.setLayoutData(textData);

        ScrolledComposite scrolledComposite = new ScrolledComposite(container, SWT.V_SCROLL | SWT.H_SCROLL);
        scrolledComposite.setExpandHorizontal(true);
        scrolledComposite.setExpandVertical(true);

        GridData scrollData = new GridData(SWT.FILL, SWT.FILL, true, true);
        scrolledComposite.setLayoutData(scrollData);

        Composite radioButtonComposite = new Composite(scrolledComposite, SWT.NONE);
        GridLayout radioLayout = new GridLayout(1, false);
        radioLayout.marginWidth = 5;
        radioLayout.marginHeight = 5;
        radioLayout.verticalSpacing = 5;
        radioButtonComposite.setLayout(radioLayout);
        radioButtonComposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));

        List<QDeveloperProfile> profiles = QDeveloperProfileUtil.getInstance().queryForDeveloperProfiles(false);
        QDeveloperProfile selectedDeveloperProfile = QDeveloperProfileUtil.getInstance().getSelectedProfile();

        if (selectedDeveloperProfile != null) {
            selectedRadioButton = createRadioButton(radioButtonComposite, selectedDeveloperProfile, SWT.NONE, true);
        }

        for (QDeveloperProfile profile : profiles) {
            if (selectedDeveloperProfile == null || !profile.getArn().equals(selectedDeveloperProfile.getArn())) {
                createRadioButton(radioButtonComposite, profile, SWT.NONE, false);
            }
        }

        scrolledComposite.setContent(radioButtonComposite);
        Point computeSize = radioButtonComposite.computeSize(SWT.DEFAULT, SWT.DEFAULT);
        scrolledComposite.setMinSize(computeSize);

        radioButtonComposite.layout(true, true);
        scrolledComposite.layout(true, true);
        container.layout(true, true);

        return container;
    }

    @Override
    protected void configureShell(final Shell newShell) {
        super.configureShell(newShell);
        newShell.setText(WINDOW_TITLE);

        newShell.addDisposeListener(e -> {
            if (titleFont != null && !titleFont.isDisposed()) {
                titleFont.dispose();
            }

            if (descriptionFont != null && !descriptionFont.isDisposed()) {
                descriptionFont.dispose();
            }
        });
    }

    @Override
    protected void okPressed() {
        QDeveloperProfileUtil.getInstance().setDeveloperProfile((QDeveloperProfile) selectedRadioButton.getData());
        super.okPressed();
    }

    private RadioButtonWithDescriptor createRadioButton(final Composite parent,
            final QDeveloperProfile developerProfile,
            final int style, final boolean isSelected) {
        RadioButtonWithDescriptor button = new RadioButtonWithDescriptor(parent, developerProfile.getName(),
                developerProfile.getRegion(), developerProfile.getAccountId(), style);
        button.setData(developerProfile);
        button.addSelectionListener(() -> {
            if (selectedRadioButton != null) {
                selectedRadioButton.setSelection(false);
            }
            selectedRadioButton = button;
        });

        button.setSelection(isSelected);
        return button;
    }

}
